{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","calculateTimeLeft","Date","getFullYear","difference","timeLeft","days","Math","floor","hours","minutes","seconds","useState","setTimeLeft","year","useEffect","setTimeout","timerComponents","Object","keys","forEach","interval","push","className","style","textShadow","textDecoration","fontSize","fontFamily","length","id","background","boxShadow","color","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAsEeA,MAjEf,WACE,IAAMC,EAAoB,YACb,IAAIC,MAAOC,cAAtB,IACMC,EAAa,IAAIF,KAAJ,UAAY,KAAZ,UAA2B,IAAIA,KAC9CG,EAAW,GAWf,OATID,EAAa,IACfC,EAAW,CACTC,KAAMC,KAAKC,MAAMJ,EAAU,OAC3BK,MAAOF,KAAKC,MAAOJ,EAAU,KAAuB,IACpDM,QAASH,KAAKC,MAAOJ,EAAa,IAAO,GAAM,IAC/CO,QAASJ,KAAKC,MAAOJ,EAAa,IAAQ,MAIvCC,GAfI,EAkBmBO,mBAASX,KAlB5B,mBAkBNI,EAlBM,KAkBIQ,EAlBJ,OAmBED,oBAAS,IAAIV,MAAOC,eAA5BW,EAnBM,oBAqBbC,qBAAU,WACRC,YAAW,WACTH,EAAYZ,OACX,QAGL,IAAMgB,EAAkB,GAgBxB,OAdAC,OAAOC,KAAKd,GAAUe,SAAQ,SAACC,GACxBhB,EAASgB,IAIdJ,EAAgBK,KACd,8BACGjB,EAASgB,GADZ,IACwBA,EAAU,SAQpC,yBAAKE,UAAU,8CACb,wBAAIC,MAAO,CAAEC,WAAY,oBAAqBC,eAAgB,YAAaC,SAAU,UAArF,QAAsGb,EAAtG,KACA,wBAAIU,MAAO,CAAEI,WAAY,4BAAzB,8RAECX,EAAgBY,OAASZ,EAAkB,0BAAOa,GAAG,aACtD,6BACA,6BACA,uBAAGP,UAAU,iDAAiDC,MAAO,CACnEO,WAAY,cAAeC,UAAW,0BAEtC,uBAAGR,MAAO,CACRE,eAAgB,OAAQO,MAAO,SAC9BC,KAAK,iCAAgC,4BAAQV,MAAO,CAAEC,WAAY,sBAA7B,gBAC1C,6BACA,uBAAGK,GAAG,KAAKN,MAAO,CAAEC,WAAY,kBAAmB,+CAA4B,6BAA/E,gBCnDcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.061ff28d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport 'tachyons';\n\n// var fireworksReact = require(\"fireworks-react\")\nfunction App() {\n  const calculateTimeLeft = () => {\n    let year = new Date().getFullYear();\n    const difference = new Date(`${2020}-8-12`) - new Date();\n    let timeLeft = {};\n\n    if (difference > 0) {\n      timeLeft = {\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n        minutes: Math.floor((difference / 1000 / 60) % 60),\n        seconds: Math.floor((difference / 1000) % 60),\n      };\n    }\n\n    return timeLeft;\n  };\n\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n  const [year] = useState(new Date().getFullYear());\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n  });\n\n  const timerComponents = [];\n\n  Object.keys(timeLeft).forEach((interval) => {\n    if (!timeLeft[interval]) {\n      return;\n    }\n\n    timerComponents.push(\n      <span>\n        {timeLeft[interval]} {interval}{\" \"}\n      </span>\n    );\n  });\n\n\n\n  return (\n    <div className=\"tc center mv0 mw0 dib ph4 f2 p2 pa4-ns br3\">\n      <h2 style={{ textShadow: \"1px 1px 2px black\", textDecoration: \"underline\", fontSize: \"1.2em\" }}>ETOW {year} </h2>\n      <h4 style={{ fontFamily: \"'Great Vibes', cursive;\" }}>With pride & joy we would like to invite you on 12th August to celebrate our ETOW 4th anniversary.\n      We are so grateful that you have given us some of our most precious memories in our lives by your love and support. It would be great pleasure to have you with us on this special day.</h4>\n      {timerComponents.length ? timerComponents : < span id=\"firework\"></span>}\n      <br />\n      <br />\n      <p className=\"tc center ba pa3 br3 bw1 mv0 shadow-5 dib grow\" style={{\n        background: \"transparent\", boxShadow: \"1px 1px 1px 1px black\"\n      }}>\n        <a style={{\n          textDecoration: 'none', color: 'black'\n        }} href=\"https://eithertalkorwalk.com/\"><strong style={{ textShadow: \"1px 1px 1px black\" }} >Visit Now!</strong></a></p>\n      <br />\n      <p id=\"ww\" style={{ textShadow: \"1px 1px black\" }}><strong>Warm Wishes</strong><br />ETOW Group</p>\n\n    </div >\n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}